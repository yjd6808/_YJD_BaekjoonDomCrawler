var jsdom = require("jsdom");
var fileSystem = require("fs");
var readlineSync = require("readline-sync")
var backjoonCrawler = require("./baekjoon-crawler");
const { JSDOM } = jsdom;

/** ============================================================================
 * 이 프로그램의 메인 함수입니다.
 * ============================================================================ */
async function main() {
    try {
		var baekjoonDOM;

        if (process.argv.length >= 4) {
            console.log('사용법 : baekjoon-dom-crawler.exe <문제번호>');
            process.exit(-1);
        }

        if (process.argv.length == 3) {
			var problemNumber = parseInt(process.argv[3]);

            baekjoonDOM = await backjoonCrawler.getBackjoonProblemDOM(problemNumber);
            process.exit(0);
        }


		while (true) {
			console.log('<메뉴>');
			console.log('1. 특정 백준 문제 json 형식으로 추출');
			console.log('2. 범위 백준 문제 json 형식으로 추출');

			
			var inputz = require("readline-sync").question('ff');
		}
		

        // 정도가 제작한 HTML 클립보드 템플릿 문자열을 불러옵니다.
        baekjoonDOM = await backjoonCrawler.getBackjoonProblemDOM(18932);

        baekjoonDOM.parseAll();
        baekjoonDOM.printInfo();

        //saveJungdoBaekjoonDomToJson(baekjoonDOM);
    } catch (exception) {
        console.error(exception);
    }
}

/**
 * 백준돔의 데이터를 HTML 클립보드 형식의 템플릿에 저장합니다.
 */
async function saveJungdoBaekjoonDomToJson(baekjoonDOM) {
    //console.log(JSON.stringify(baekjoonDOM).toString());
}

/**
 * 인자로 전달한 시간만큼 대기합니다.
 * @param {number} ms - 대기 시간 miliseconds
 */
function sleep(ms) {
    const wakeUpTime = Date.now() + ms;
    while (Date.now() < wakeUpTime) {}
}


/** ============================================================================
 * 스크립트 시작
 * ============================================================================ */
main();
